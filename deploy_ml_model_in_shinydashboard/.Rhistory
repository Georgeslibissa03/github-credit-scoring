library(tidyverse)
library(ggthemes)
library(ROSE)
library(pROC)
options(repr.plot.width=6, repr.plot.height=4)
theme_set(theme_minimal())
# Importation des donnees
url = 'C:/Users/pc/OneDrive/Documents/Environement R/Risque de credit/Dataset/credit_risk_dataset.csv'
df <- read.csv(url)
head(df)
str(df)
# Resumé statisques
summary(df)
df$loan_status <- as.factor(df$loan_status)
print(prop.table(table(df$loan_status)))
plot(df$loan_status, main= 'Statut du credit')
ggplot(df, aes(x=person_emp_length, y=loan_percent_income)) +
geom_point(aes(color = loan_status, shape = loan_status))
ggplot(df, aes(x = "", y=loan_percent_income, fill=loan_status)) +
geom_boxplot() +
labs(x = "", y="loan_percent_income")
show_relation <- function(data, feature, title_y){
ggplot(data, aes(x = "", y=feature, fill=loan_status)) +
geom_boxplot() +
labs(x = "", y = title_y)
}
show_relation(df, df$loan_amnt, "loan_amnt")
hist(df$loan_amnt, main = "Montant du credit")
ggplot(df, aes(x = loan_amnt)) +
geom_histogram(color="red", fill="red", bins=50) +
facet_wrap(~ loan_status, scales="free", ncol=2)
hist(df$person_income, main = "Histogramme du Revenu annuel")
plot(df$person_income, ylab="Revenu annuel")
show_relation(subset(df, df$person_income < 100000), subset(df, df$person_income < 100000)$person_income, "person_income")
hist(df$loan_int_rate, main = "Taux d'intéret du crédit")
show_relation(df, df$loan_int_rate, "loan_int_rate")
hist(df$person_emp_length)
show_relation(subset(df, df$person_emp_length < 50),
subset(df, df$person_emp_length < 50)$person_emp_length,
"person_emp_length")
hist(df$person_age)
show_relation(df, df$person_age, "person_age")
df %>%
ggplot(aes(x=person_home_ownership, fill = person_home_ownership)) +
geom_bar()+
theme_bw()
df %>%
ggplot(aes(x=person_home_ownership, fill = person_home_ownership)) +
geom_bar()+
theme_bw()+
facet_wrap(~ loan_status, scales = "free", ncol = 2)
df %>%
ggplot(aes(x=loan_intent, fill = loan_intent)) +
geom_bar()+
theme_bw()
df %>%
ggplot(aes(x=loan_intent, fill = loan_intent)) +
geom_bar()+
theme_bw()+
facet_wrap(~ loan_status, scales = "free", ncol = 2)
df_clean <- df
nrow(df_clean)
index_outlier_income <- which(df_clean$person_income < quantile(df_clean$person_income, 0.25) - 1.5 * IQR(df_clean$person_income) | df_clean$person_income > quantile(df_clean$person_income, 0.75) + 1.5 * IQR(df_clean$person_income))
df_clean <- df_clean[-index_outlier_income, ]
hist(df_clean$person_income, main="Histogramme du revenu annuel")
df_clean <- subset(df_clean, df_clean$person_age < 100)
nrow(df_clean)
index_NA_person_emp_length <- which(is.na(df_clean$person_emp_length))
df_clean$person_emp_length[index_NA_person_emp_length] <- median(df_clean$person_emp_length, na.rm=TRUE)
index_NA_rate <- which(is.na(df_clean$loan_int_rate))
df_clean$loan_int_rate[index_NA_rate] <- median(df_clean$loan_int_rate, na.rm=TRUE)
print(summary(df_clean$person_emp_length))
print(summary(df_clean$loan_int_rate))
df_clean2 <- df_clean
normalize <- function(x){
return ((x - min(x)) / (max(x) - min(x)))
}
for (col in colnames(df_clean2)){
if((class(df_clean2[, col]) != 'factor')){
df_clean2[, col] <- normalize(df_clean2[, col])
}
}
head(df_clean2)
seed <- 131
set.seed(seed)
index_train <- sample(1:nrow(df_clean2), 0.8 * nrow(df_clean2))
train_set <- df_clean2[index_train, ]
test_set <- df_clean2[-index_train, ]
print(nrow(train_set))
print(nrow(test_set))
prop.table(table(train_set$loan_status))
prop.table(table(test_set$loan_status))
nrow(subset(train_set, train_set$loan_status == 0))
nrow(subset(train_set, train_set$loan_status == 1))
# Methode de sur-échantillonage de la classe minoritaire (ROS)
train_oversampled <- ovun.sample(formula = loan_status ~., data = train_set, method = 'over', seed=seed)
# Affichage du resultat
print(class(train_oversampled))
print(summary(train_oversampled))
train_oversampled_df <- train_oversampled$data
head(train_oversampled_df)
prop.table(table(train_oversampled_df$loan_status))
train_undersampled <- ovun.sample(formula = loan_status ~ ., data = train_set, method = 'under', seed=seed)
print(class(train_undersampled))
print(summary(train_undersampled))
train_undersampled_df <- train_undersampled$data
prop.table(table(train_undersampled_df$loan_status))
train_ros_rus <- ovun.sample(formula = loan_status ~ ., data = train_set, method = 'both', N=12000, seed=seed)
train_ros_rus_df <- train_ros_rus$data
prop.table(table(train_ros_rus_df$loan_status))
log_modeling <- function(train){
model <- glm(loan_status ~ ., family = 'binomial', data = train)
return (model)
}
log_model <- log_modeling(train_set)
summary(log_model)
preds_log <- predict(log_model, newdata = test_set, type = 'response')
head(preds_log)
seuil <- 0.3
preds_status <- ifelse(preds_log > seuil, 1, 0)
conf_mat <- table(test_set$loan_status, preds_status)
conf_mat
TP <- conf_mat[2, 2]
TN <- conf_mat[1, 1]
FP <- conf_mat[1, 2]
FN <- conf_mat[2, 1]
accuracy <- (TP+TN) / nrow(test_set)
accuracy
sensitivity <- TP / (FN + TP)
sensitivity
specificity <- TN / (TN + FP)
specificity
# Création d'une fonction d'évaluation de modèle
model_evaluation <- function(Model, Seuil) {
predictions <- predict (Model, newdata = test_set, type = 'response')
predicted_status <- ifelse(predictions > Seuil, 1, 0)
Conf_Mat <- table(test_set$loan_status, predicted_status)
Accuracy <- (Conf_Mat[2,2] + Conf_Mat[1,1]) / nrow(test_set)
Sensitivity <- Conf_Mat[2,2] / (Conf_Mat[2,2] + Conf_Mat[2,1])
Specificity <- Conf_Mat[1,1] / (Conf_Mat[1,1] + Conf_Mat[1,2])
One_minus_spec <- 1 - Specificity
results <- list (Conf_Mat, Accuracy, Sensitivity, Specificity, One_minus_spec)
names (results) <- c('Matrice de confusion','Score de classification',
'Sensibilité du modèle','Spécicité du modèle',
'One minus Specificity')
return (results)
}
model_evaluation(log_model, 0.3)
print_results <- function(Model) {
# definition des seuils
seuils <- seq(0.01, 0.99, by = 0.01)
# definition des vecteurs vides pour stocker les metriques d'evaluation du model pour divers seuils
acc_model <- c()
sens_model <- c()
spec_model <- c()
one_minus_spec_model <- c()
for (i in seuils) {
r <- model_evaluation(Model, i)
acc_model <- append(acc_model, r[['Score de classification']])
sens_model <- append(sens_model, r[['Sensibilité du modèle']])
spec_model <- append(spec_model, r[['Spécicité du modèle']])
one_minus_spec_model <- append(one_minus_spec_model, r[['One minus Specificity']])
}
# Dataframe des metriques pour divers seuils
resultats <- data.frame(cbind(seuils, acc_model, sens_model, spec_model, one_minus_spec_model))
# Graphique montrant des metriques pour differents seuils
plots <- ggplot() +
geom_line(data = resultats, aes(x=seuils, y=acc_model, color='red')) +
geom_line(data = resultats, aes(x=seuils, y=sens_model, color='green')) +
geom_line(data = resultats, aes(x=seuils, y=spec_model, color='blue')) +
labs(x = 'Seuil', y = 'Scrore') +
scale_color_discrete(name = 'Metriques', labels = c("Accuracy", "sensitivity","Specificity"))
# Courbe ROC
roc_curve <- ggplot() +
geom_line(data = resultats, aes(x=one_minus_spec_model, y=sens_model)) +
labs(x = '1 - Specificity', y = 'Sensitivity')
# Resultats de la fonction
all_results <- list(resultats, plots, roc_curve)
names(all_results) <- c('Metrics', 'Plot', 'ROC curve')
return (all_results)
}
head(print_results(log_model)[['Metrics']])
tail(print_results(log_model)[['Metrics']])
print_results(log_model)[['Plot']]
print_results(log_model)[['ROC curve']]
auc_model <- function(model) {
predictions <- predict(model, newdata = test_set, type = "response")
return (auc(roc(test_set$loan_status, predictions)))
}
auc_model(log_model)
null_model <- glm(loan_status ~ 1, data = train_set, family='binomial')
forward_model <- step(null_model,
scope = list(lower = null_model, upper = log_model),
direction = 'forward',
steps = 2000)
head(print_results(forward_model))
print_results(forward_model)[['Plot']]
print_results(forward_model)[['ROC curve']]
auc_model(forward_model)
log_model_ros <- log_modeling(train_oversampled_df)
summary(log_model_ros)
print_results(log_model_ros)[['Plot']]
print_results(log_model_ros)[['ROC curve']]
auc_model(log_model_ros)
log_model_rus <- log_modeling(train_undersampled_df)
summary(log_model_rus)
print_results(log_model_rus)[['Plot']]
print_results(log_model_rus)[['ROC curve']]
auc_model(log_model_rus)
log_model_ros_rus <- log_modeling(train_ros_rus_df)
summary(log_model_ros_rus)
print_results(log_model_ros_rus)[['Plot']]
print_results(log_model_ros_rus)[['ROC curve']]
auc_model(log_model_ros_rus)
# Enregistrer le model au format RDS
saveRDS(log_model_ros_rus, "credit_scoring_rf_model.rds")
new_data = data.frame(
"person_age" = 20,
"person_income" = 500000,
"person_home_ownership" = "RENT",
"person_emp_length" = 5,
"loan_intent" = "PERSONAL",
"loan_grade" = "D",
"loan_amnt" = 40000,
"loan_int_rate" = 17,
"loan_percent_income" = 0.6,
"cb_person_default_on_file" = "Y",
"cb_person_cred_hist_length" = 5
)
new_data
pred = predict(log_model_ros_rus, newdata = new_data, type = "raw")
pred = predict(log_model_ros_rus, newdata = new_data, type = "raw")
pred
pred <- predict(log_model_ros_rus, newdata = new_data, type = "raw")
pred
log_model_ros_rus
log_model
new_data
pred <- predict(log_model_ros_rus, newdata = new_data, type = "raw")
pred <- predict(log_model_ros_rus, newdata = new_data, type = "response")
pred
pred <- predict(log_model_ros_rus, newdata = new_data, type = "prob")
pred <- predict(log_model_ros_rus, newdata = new_data, type = "terms")
pred
pred <- predict(log_model_ros_rus, newdata = new_data, type = "link")
pred
pred <- predict(log_model_ros_rus, newdata = new_data, type = "response")
pred
pred <- predict(log_model_ros_rus, newdata = new_data, type = "response")
pred
pred <- predict(log_model_ros_rus, newdata = new_data, type = "response")
pred
shiny::runApp('app')
library(shiny)
install.packages("shinydashboard")
library(shiny)
library(shinydashboard)
install.packages("shinydashboard")
shiny::runApp('app')
library(shiny)
library(shinydashboard)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
pred <- predict(log_model_ros_rus, newdata = new_data, type = "response")
pred
pred <- predict(log_model_ros_rus, newdata = new_data, type = "prob")
pred <- predict(log_model_ros_rus, newdata = new_data, type = "response")
pred
pred <- predict(log_model_ros_rus, newdata = new_data, type = "terms")
pred
pred <- predict(log_model_ros_rus, newdata = new_data, type = "link")
pred
pred <- predict(log_model, newdata = new_data, type = "response")
pred
pred <- predict(log_model_ros_rus, newdata = new_data, type = "response")
pred
print(prop.table(table(df$loan_status)))
print(prop.table(table(log_model_ros_rus)))
pred <- predict(log_model_ros_rus, newdata = new_data, type = "response", se = TRUE)
pred
pred <- predict(log_model_ros_rus, newdata = new_data, type = "limk", se = TRUE)
pred <- predict(log_model_ros_rus, newdata = new_data, type = "link", se = TRUE)
pred
pred <- predict(log_model_ros_rus, newdata = new_data, type = "terms", se = TRUE)
pred
pred <- predict(log_model_ros_rus, newdata = new_data, type = "response", se = TRUE)
pred
pred <- predict(log_model_ros_rus, newdata = new_data, type = "response", se = FALSE)
pred
pred <- predict(log_model_ros_rus, newdata = new_data)
pred
pred <- predict(log_model_ros_rus, newdata = new_data,type = "response")
pred
pred$1
pred$'1'
pred$`1`
pred$
1
pred$
loan_int_rate
pred$1
pred$3
pred <- predict(log_model_ros_rus, newdata = new_data,type = "response")
pred
library(caret)
library(caret)
pred <- predict(log_model_ros_rus, newdata = new_data,type = "response")
pred
pred <- predict(log_model_ros_rus, newdata = new_data,type = "prob")
log_model_ros_rus
preds_log
pred <- predict(log_model, newdata = new_data,type = "prob")
pred <- predict(log_model, newdata = new_data,type = "response")
pred
pred <- predict(log_model, newdata = test_set,type = "response")
pred
summary(pred)
pred <- predict(log_model, newdata = new_data,type = "response")
summary(pred)
pred
# Modele de foret aleatoire
library(caret)
set.seed(10000)
fitControl = trainControl(method = "cv", number=3)
rf_model = train(loan_status~.,
data=df,
method="rf",
trControl=fitControl,
verbose=F)
# Modele de foret aleatoire
library(caret)
set.seed(10000)
fitControl = trainControl(method = "cv", number=3)
rf_model = train(loan_status~.,
data=df,
method="rf",
trControl=fitControl,
verbose=F)
rf_model = train(loan_status~.,
data=train_set,
method="rf",
trControl=fitControl,
verbose=F)
fitControl = trainControl(method = "cv", number=3)
# Modele de foret aleatoire
library(caret)
# Modele de foret aleatoire
library(caret)
fitControl = trainControl(method = "cv", number=3)
rf_model = train(loan_status~.,
data=train_set,
method="rf",
trControl=fitControl,
verbose=F)
rf_model
# Exemple d'utilisation du modele
new_data = data.frame(
"person_age" = 20,
"person_income" = 500000,
"person_home_ownership" = "RENT",
"person_emp_length" = 5,
"loan_intent" = "PERSONAL",
"loan_grade" = "D",
"loan_amnt" = 40000,
"loan_int_rate" = 17,
"loan_percent_income" = 0.6,
"cb_person_default_on_file" = "Y",
"cb_person_cred_hist_length" = 5
)
data(df)
data(df)
library(tidyverse)
library(ggthemes)
library(ROSE)
library(tidyverse)
library(ggthemes)
library(ROSE)
library(pROC)
library(ROSE)
library(pROC)
library(caret)
options(repr.plot.width=6, repr.plot.height=4)
theme_set(theme_minimal())
# Importation des donnees
url = 'C:/Users/pc/OneDrive/Documents/Environement R/Risque de credit/Dataset/credit_risk_dataset.csv'
df <- read.csv(url)
data(df)
df <- read.csv(url)
data(df)
df <- read.csv(url)
data(df)
head(df)
df
data(df)
data(mtcars)
data(mtcars)
# Importation des donnees
url = 'C:/Users/c/OneDrive/Documents/Environement R/Risque de credit/Dataset/credit_risk_dataset.csv'
df <- read.csv(url)
# Importation des donnees
url = 'C:/Users/pc/OneDrive/Documents/Environement R/Risque de credit/Dataset/credit_risk_dataset.csv'
df <- read.csv(url)
data(mtcars)
data(df)
df
rf_model <- train(loan_status~.,
data = train_set,
method="rf",
trControl=fitControl)
library(caret)
library(caret)
fitControl = trainControl(method="cv", number=3)
rf_model <- train(loan_status~.,
data = train_set,
method="rf",
trControl=fitControl)
rf_model
# Enregistrer le model au format RDS
saveRDS(rf_model, "credit_scoring_rf_model.rds")
# Enregistrer le model au format RDS
saveRDS(rf_model, "\app\credit_scoring_rf_model.rds")
# Enregistrer le model au format RDS
saveRDS(rf_model, "/app/credit_scoring_rf_model.rds")
# Enregistrer le model au format RDS
saveRDS(rf_model, "/app/credit_scoring_rf_model.rds")
# Enregistrer le model au format RDS
saveRDS(rf_model, "app/credit_scoring_rf_model.rds")
# Enregistrer le model au format RDS
saveRDS(rf_model, "app/credit_scoring_rf_model.rds")
# Exemple d'utilisation du modele
new_data = data.frame(
"person_age" = 20,
"person_income" = 500000,
"person_home_ownership" = "RENT",
"person_emp_length" = 5,
"loan_intent" = "PERSONAL",
"loan_grade" = "D",
"loan_amnt" = 40000,
"loan_int_rate" = 17,
"loan_percent_income" = 0.6,
"cb_person_default_on_file" = "Y",
"cb_person_cred_hist_length" = 5
)
new_data
pred <- predict(rf_model, newdata = new_data,type = "prob")
pred
shiny::runApp('app')
